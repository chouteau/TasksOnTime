<div class="container-fluid">
	<div class="row">
		<EditForm Model="Settings">
			<InputCheckbox @bind-Value="Settings.Enable" /> Scheduling Enabled<br />
			<button @onclick="ResetRunningTasks" class="btn btn-danger">Reset running tasks</button>
		</EditForm>
	</div>

	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Name</th>
				<th>Next Running Date</th>
				<th>Allow Multiple instances</th>
				<th>Period</th>
				<th>StartedCount</th>
				<th>Last State</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in scheduledTaskInfoList.OrderBy(i => i.ScheduledTask.Name))
			{
				var cssState = item.LastRunningTask != null && !item.LastRunningTask.TerminatedDate.HasValue ? "table-success" : "";
				if (item.LastRunningTask != null && item.LastRunningTask.FailedDate.HasValue)
				{
					cssState = "table-danger";
				}
				if (!item.ScheduledTask.Enabled)
				{
					cssState = "table-secondary";
				}
				<tr class="@cssState">
					<td>
						<a href="/scheduledtask/@item.ScheduledTask.Name">@item.ScheduledTask.Name</a><br />
						@item.ScheduledTask.Description
					</td>
					<td>
						@if (item.ScheduledTask.NextRunningDate == DateTime.MinValue)
						{
							<span>Never</span>
						}
						else
						{
							<span>@item.ScheduledTask.NextRunningDate</span>
						}
					</td>
					<td>
						Global : @item.ScheduledTask.AllowMultipleInstance<br />
						Local : @item.ScheduledTask.AllowLocalMultipleInstances<br />
					</td>
					<td>
						@item.ScheduledTask.Period <br />
						Interval : @item.ScheduledTask.Interval <br />
						@if (item.ScheduledTask.Period == ScheduledTaskTimePeriod.Month)
						{
							<span>Start Day : @item.ScheduledTask.StartDay<br /></span>
						}
						@if (item.ScheduledTask.Period != ScheduledTaskTimePeriod.Hour
								&& item.ScheduledTask.Period != ScheduledTaskTimePeriod.Minute
								&& item.ScheduledTask.Period != ScheduledTaskTimePeriod.Second)
						{
							<span>Start Hour : @item.ScheduledTask.StartHour</span>

							<br />
						}
						@if (item.ScheduledTask.Period != ScheduledTaskTimePeriod.Minute
								&& item.ScheduledTask.Period != ScheduledTaskTimePeriod.Second)
						{
							<span>Start Minute : @item.ScheduledTask.StartMinute</span>

							<br />
						}
					</td>
					<td>@item.ScheduledTask.StartedCount</td>
					<td>
						@if (item.LastRunningTask != null)
						{
							if (item.LastRunningTask.CancelingDate.HasValue)
							{
								<div>Canceling</div>
							}
							else if (item.LastRunningTask.CanceledDate.HasValue)
							{
								<div>Canceled</div>
							}
							else if (item.LastRunningTask.FailedDate.HasValue)
							{
								<div>Failed</div>
							}
							else if (item.LastRunningTask.TerminatedDate.HasValue)
							{
								<div>Completed</div>
							}
							else if (item.LastRunningTask.RunningDate.HasValue)
							{
								<div>Running</div>
							}
							else if (item.LastRunningTask.EnqueuedDate.HasValue)
							{
								<div>Enqueued</div>
							}
						}
					</td>
					<td>
						<button class="btn btn-primary me-1" @onclick="() => EditTask(item.ScheduledTask)">Edit</button>
						@if (item.LastRunningTask == null
								|| (item.LastRunningTask != null
								&& item.LastRunningTask.TerminatedDate.HasValue))
						{
							<button class="btn btn-success me-1" @onclick="() => ForceTask(item.ScheduledTask)">Force</button>
						}
						else
						{
							<button class="btn btn-secondary me-1" @onclick="() => CancelTask(item.ScheduledTask)">Cancel</button>
							<button class="btn btn-secondary me-1" @onclick="() => TerminateTask(item.ScheduledTask)">Terminate</button>
						}
						<button class="btn btn-warning me-1" @onclick="() => ConfirmDeleteTask(item.ScheduledTask)">Delete</button>
					</td>
				</tr>
			}
		</tbody>

	</table>

	<ConfirmDialog @ref="confirmDeleteTask" Title="Confirm delete ?" Accept="DeleteTask" />
	<Toast @ref="toast" />
</div>

